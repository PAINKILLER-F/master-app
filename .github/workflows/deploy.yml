# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to IKS

on:
  push:
    branches: [ "master" ]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: iks-test
  PORT: 5001

jobs:
  build-jar:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    container:
      #      credentials:
      #        username: ${{ github.actor }}
      #        password: ${{ secrets.github_token }}
      image: maven:3.6.3-openjdk-11-slim
      #      env:
      #        NODE_ENV: development
      volumes:
        - build:/opt/build
    #      options: --cpus 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Download and Install IBM Cloud CLI
      - name: Build jar
        run: mvn -DskipTests=true clean install
        # Authenticate with IBM Cloud CLI
      - name: Copy artifact
        run: cp ./target/*.jar /opt/build/app.jar

#TODO------------------------------------------------------
  build-docker:
    runs-on: ubuntu-latest
    steps:
      # Build the Docker image
      - name: Build with Docker
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the image to IBM Container Registry
      - name: Push the image to ICR
        run: |
          docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

      # Deploy the Docker image to the IKS cluster
      - name: Deploy to IKS
        run: |
          ibmcloud ks cluster config --cluster $IKS_CLUSTER
          kubectl config current-context
          kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide
