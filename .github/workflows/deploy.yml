name: Build and Deploy to K8s

on:
  push:
    branches: [ "ci" ] #TODO: change to main

# Environment variables available to all jobs and steps in this workflow
env:
  KUBE_CONFIG_PATH: /opt/app/kubeconfig.yml
  HELM_IMAGE: alpine/helm
  HELM_VERSION: 3.7.1
  GITHUB_SHA: ${{ github.sha }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  REGISTRY_LOGIN: ${{ secrets.REGISTRY_LOGIN }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}


jobs:
  build-jar:
    name: Build jar
    runs-on: ubuntu-latest
    environment: production
    container:
      image: maven:3.6.3-openjdk-11-slim
      volumes:
        - build:/opt/build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build jar
        run: mvn -DskipTests=true clean install
      - name: Copy artifact
        run: cp ./target/*.jar $JAR_PATH
      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: builded-jar
          path: /opt/build/app.jar

  build-docker:
    name: Build docker
    runs-on: ubuntu-latest
    needs:
      - build-jar
    steps:
      - name: Download jar
        uses: actions/download-artifact@v3
        with:
          name: builded-jar
          path: ./app.jar
#      - name: Copy artifact
#        run: cp "$JAR_PATH" ./app.jar
      # Build the Docker image
      - name: Build with Docker
        run: docker build -t "$REGISTRY_LOGIN"/"$IMAGE_NAME":"$GITHUB_SHA" --build-arg GITHUB_SHA="$GITHUB_SHA" .
      # Push the image to Registry
      - name: Push the image to Registry
        run: docker push "$REGISTRY_LOGIN"/"$IMAGE_NAME":"$GITHUB_SHA"

#  deploy-to-cluster:
#    name: Deploy to cluster
#    needs:
#      - build-docker
#    runs-on: ubuntu-latest
#    container:
#      image: ${HELM_IMAGE}:${HELM_VERSION}
#    steps:
#      - name: Write kubeconfig
#        run: |
#          echo "${KUBE_CONFIG}" > ${KUBE_CONFIG_PATH}
#          chmod 600 ${KUBE_CONFIG_PATH}
#
#        # Deploy the Docker image to the cluster
#      - name: Deploy to K8S   #TODO: check vars
#        run: |
#          export DEPLOYS=$(helm ls -n ${NAMESPACE} --kubeconfig ${KUBE_CONFIG_PATH} | awk '{print $1}' | grep -E -- "^$APP$" | wc -l)
#          export HELM_KEYS="${APP} ./.helm/charts/${APP}
#                --set image.name=${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${APP}
#                --set image.tag=${VERSION}
#                --set commitId=${CI_COMMIT_SHORT_SHA}
#                -f $HELM_VALUES_DIR/common.yaml
#                -f $HELM_VALUES_DIR/${APP}.yaml
#                -f $HELM_VALUES_DIR/replicas/${APP}.yaml
#                -n ${NAMESPACE}
#                --kubeconfig ${KUBE_CONFIG_PATH}"
#          if [ ${DEPLOYS}  -eq 0 ];
#                then helm install $HELM_KEYS;
#                else helm upgrade $HELM_KEYS;
#          fi

